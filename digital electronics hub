<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Digital Electronics Hub</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f8f9fa;
            color: #333;
        }
        .product-card {
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
        }
        .cart-panel {
            transition: transform 0.3s ease;
        }
        .fade-in {
            animation: fadeIn 0.5s ease;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .rating {
            color: #ffd700;
        }
    </style>
</head>
<body class="bg-gray-100">
    <header class="bg-blue-600 text-white py-4 shadow-lg">
        <div class="container mx-auto flex justify-between items-center px-4">
            <h1 class="text-3xl font-bold"><i class="fas fa-shopping-cart mr-2"></i>The Digital Electronics Hub</h1>
            <div class="flex items-center">
                <input type="text" id="searchInput" placeholder="Search products..." class="px-3 py-2 rounded-l focus:outline-none">
                <button onclick="searchProducts()" class="bg-blue-500 px-4 py-2 rounded-r"><i class="fas fa-search"></i></button>
                <button id="cartToggle" class="ml-4 bg-green-500 px-4 py-2 rounded"><i class="fas fa-shopping-bag mr-1"></i>Cart <span id="cartCount">0</span></button>
            </div>
        </div>
    </header>

    <main class="container mx-auto p-4">
        <section id="productGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 fade-in">
            <!-- Products will be populated here -->
        </section>
    </main>

    <!-- Cart Panel -->
    <div id="cartPanel" class="fixed right-0 top-0 h-full w-96 bg-white shadow-lg transform translate-x-full z-50 cart-panel">
        <div class="p-4 border-b">
            <h2 class="text-xl font-bold flex items-center"><i class="fas fa-shopping-cart mr-2"></i>Your Cart</h2>
            <button onclick="toggleCart()" class="absolute top-4 right-4 text-gray-500"><i class="fas fa-times"></i></button>
        </div>
        <div id="cartItems" class="p-4 flex-1 overflow-y-auto">
            <!-- Cart items will be populated here -->
        </div>
        <div id="cartTotal" class="p-4 border-t text-center">
            <p class="text-lg font-semibold">Total: $<span id="totalAmount">0.00</span></p>
            <button class="w-full mt-2 bg-green-500 text-white py-2 rounded transition duration-200 hover:bg-green-600">Checkout</button>
        </div>
    </div>
    <div id="cartOverlay" onclick="toggleCart()" class="fixed inset-0 bg-black bg-opacity-50 hidden"></div>

    <footer class="bg-gray-800 text-white text-center py-4 mt-8">
        <p>&copy; 2023 The Digital Electronics Hub. Built with passion for daily tech essentials.</p>
    </footer>

    <script>
        // Product data
        const products = [
            { id: 1, name: 'Wireless Earbuds', price: 99.99, description: 'High-quality sound with noise cancellation.', category: 'Audio', rating: 4.5, imageAlt: 'Wireless in-ear earbuds in sleek black color with charging case, displayed on a modern wooden desk' },
            { id: 2, name: 'Smartphone Charger', price: 29.99, description: 'Fast-charging adapter for smartphones up to 65W.', category: 'Accessories', rating: 4.7, imageAlt: 'Compact USB-C charger plugged into a wall socket, with charging cable coiled neatly' },
            { id: 3, name: 'Bluetooth Speaker', price: 49.99, description: 'Portable speaker with waterproof design.', category: 'Audio', rating: 4.6, imageAlt: 'Small cylindrical Bluetooth speaker in blue color, placed on a coaster outdoors' },
            { id: 4, name: 'Smartwatch', price: 199.99, description: 'Fitness tracking features with heart rate monitor.', category: 'Wearables', rating: 4.8, imageAlt: 'Elegant smartwatch on a wrist, showing fitness dashboard display with icons for heart, steps, and notifications' },
            { id: 5, name: 'Laptop Stand', price: 39.99, description: 'Adjustable stand for ergonomic workspace.', category: 'Accessories', rating: 4.3, imageAlt: 'Foldable aluminum laptop stand at an angle, with a closed laptop on top, placed on a desk with plants' },
            { id: 6, name: 'LED Desk Lamp', price: 24.99, description: 'Dimmable lamp with USB charging port.', category: 'Lighting', rating: 4.4, imageAlt: 'Slim LED desk lamp with adjustable arm, illuminating a notebook and pen on a cluttered desk' },
            { id: 7, name: 'Portable Power Bank', price: 34.99, description: '10000mAh capacity for on-the-go charging.', category: 'Accessories', rating: 4.9, imageAlt: 'Compact rectangular power bank with LED battery indicator, plugged into a smartphone' },
            { id: 8, name: 'USB Hub', price: 19.99, description: 'Multi-port hub for laptops and desktops.', category: 'Accessories', rating: 4.2, imageAlt: 'USB-C hub with multiple ports including HDMI, USB-A, SD card slots, connected to a laptop' },
            { id: 9, name: 'Wireless Mouse', price: 15.99, description: 'Ergonomic design with long battery life.', category: 'Peripherals', rating: 4.1, imageAlt: 'Ergonomic wireless mouse in black, resting on a mouse pad next to a keyboard' }
        ];

let cart = JSON.parse(localStorage.getItem('cart')) || [];
        let filteredProducts = [...products];
        let searchQuery = '';

        function renderProducts() {
            const productGrid = document.getElementById('productGrid');
            productGrid.innerHTML = '';
            filteredProducts.forEach(product => {
                const card = document.createElement('div');
                card.className = 'bg-white rounded-lg shadow-md p-4 product-card';
                card.innerHTML = `
                    <div class="aspect-w-16 aspect-h-9 mb-4">
                        <img src="https://placehold.co/400x300" alt="${product.imageAlt}" class="w-full h-48 object-cover rounded" onerror="this.src='https://placehold.co/400x300/cccccc/000000?text=No+Image'">
                    </div>
                    <h3 class="font-bold text-lg mb-2">${product.name}</h3>
                    <p class="text-gray-600 mb-2">${product.description}</p>
                    <div class="rating mb-2">
                        ${'★'.repeat(Math.floor(product.rating))}${'☆'.repeat(5 - Math.floor(product.rating))} (${product.rating})
                    </div>
                    <p class="text-xl font-semibold text-blue-600 mb-4">$${product.price.toFixed(2)}</p>
                    <button onclick="addToCart(${product.id})" class="w-full bg-blue-500 text-white py-2 rounded transition duration-200 hover:bg-blue-600">Add to Cart</button>
                `;
                productGrid.appendChild(card);
            });
        }

        function addToCart(productId) {
            const product = products.find(p => p.id === productId);
            const existing = cart.find(item => item.id === productId);
            if (existing) {
                existing.quantity++;
            } else {
                cart.push({ ...product, quantity: 1 });
            }
            updateCart();
            saveCart();
            showNotification(`${product.name} added to cart!`);
        }

        function removeFromCart(index) {
            if (cart[index].quantity > 1) {
                cart[index].quantity--;
            } else {
                cart.splice(index, 1);
            }
            updateCart();
            saveCart();
        }

        function updateCart() {
            const cartItems = document.getElementById('cartItems');
            const cartCount = document.getElementById('cartCount');
            const totalAmount = document.getElementById('totalAmount');

            cartItems.innerHTML = '';
            cart.forEach((item, index) => {
                const itemDiv = document.createElement('div');
                itemDiv.className = 'flex justify-between items-center mb-2 p-2 border-b';
                itemDiv.innerHTML = `
                    <div class="flex-1">
                        <p class="font-semibold">${item.name}</p>
                        <p class="text-sm text-gray-600">$${item.price.toFixed(2)} x ${item.quantity}</p>
                    </div>
                    <button onclick="removeFromCart(${index})" class="bg-red-500 text-white px-2 py-1 rounded text-sm"><i class="fas fa-trash"></i></button>
                `;
                cartItems.appendChild(itemDiv);
            });

            cartCount.textContent = cart.reduce((sum, item) => sum + item.quantity, 0);
            totalAmount.textContent = cart.reduce((sum, item) => sum + item.price * item.quantity, 0).toFixed(2);
        }

        function searchProducts() {
            searchQuery = document.getElementById('searchInput').value.toLowerCase();
            filteredProducts = products.filter(product =>
                product.name.toLowerCase().includes(searchQuery) ||
                product.category.toLowerCase().includes(searchQuery)
            );
            renderProducts();
        }

        function toggleCart() {
            const panel = document.getElementById('cartPanel');
            const overlay = document.getElementById('cartOverlay');
            panel.classList.toggle('translate-x-full');
            overlay.classList.toggle('hidden');
        }

        function saveCart() {
            localStorage.setItem('cart', JSON.stringify(cart));
        }

        function showNotification(message) {
            const notification = document.createElement('div');
            notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50 fade-in';
            notification.textContent = message;
            document.body.appendChild(notification);
            setTimeout(() => {
                document.body.removeChild(notification);
            }, 3000);
        }

        // Event listeners
        document.getElementById('cartToggle').addEventListener('click', toggleCart);
        document.getElementById('searchInput').addEventListener('input', searchProducts);

        // Initialize
        renderProducts();
        updateCart();
    </script>
</body>
</html>
</content>
</create_file>
